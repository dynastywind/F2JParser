-- commons
data Maybe[A] = Nothing
			| 	Just A;

data PolyList[A] = Nil
			| 	   Cons A (PolyList[A]);

data ParseTree = Nul
		|   Bin (ParseTree, ParseTree);

-- parsing.combinator
type Binding[Symbol, Result] = (PolyList[Symbol], Result);
type Parser[Symbol, Result] = PolyList[Symbol] -> PolyList[Binding[Symbol, Result]];
type DetPars[Symbol, Result] = PolyList[Symbol] -> Result;
type CharList = PolyList[Char];

data Expr = Con Int
		|	Var CharList
		|	Fun CharList PolyList[Expr]
		|	Add Expr Expr
		|	Min Expr Expr
		|	Mul Expr Expr
		|	Div Expr Expr;

-- Take the first element in an input
let first[A] (input: PolyList[A]): Maybe[A] =
	case input of
		Nil		  -> Nothing[A]
	|	Cons x xs -> Just[A] x;

-- Take the last element in an input
let rec last[A] (input: PolyList[A]): Maybe[A] =
	case input of
		Nil 	  -> Nothing[A]
	|	Cons x xs -> case xs of
						Nil 	  -> Just[A] x
					|	Cons y ys -> last[A](xs);

-- Take every elements in an input except the first one
let rest[A] (input: PolyList[A]): Maybe[PolyList[A]] =
	case input of
		Nil 	  -> Nothing[PolyList[A]]
	|	Cons x xs -> Just[PolyList[A]] xs;

-- Take the element located at index in an input. The index starts from 0
let rec at[A] (index: Int) (input: PolyList[A]): Maybe[A] =
	case input of
		Nil 	  -> Nothing[A]
	|	Cons x xs -> if index <= 0 then Just[A] x
					 else at[A] (index - 1) (xs);

-- Take the first n elements of a list
let rec take[A] (n: Int) (input: PolyList[A]): PolyList[A] =
	case input of
		Nil		  -> Nil[A]
	|	Cons x xs -> if n < 1 then Nil[A]
					 else (Cons[A] x (take[A] (n - 1) (xs)));

-- Drop the first n elements of a list
let rec drop[A] (n: Int) (input: PolyList[A]): PolyList[A] =
	case input of
		Nil 	  -> Nil[A]
	|	Cons x xs -> if n < 1 then input
					 else (drop[A] (n - 1) xs);

-- Return the length of the given input list
let rec size[A] (input: PolyList[A]): Int =
	case input of
		Nil 	  -> 0
	|	Cons x xs -> case rest[A](input) of
						Nothing -> 1
					|	Just a  -> 1 + size[A](a);

-- Return whether the given input list is empty or not
let isEmpty[A] (input: PolyList[A]): Bool =
	case input of
		Nil		  -> True
	|	Cons x xs -> False;

-- Drop the preceeding blanks of a given input list
let rec dropBlanks (input: CharList): CharList =
	case input of
		Nil -> Nil[Char]
	|	Cons x xs -> if x == ' ' then dropBlanks (xs)
					 else input;

-- Returns a new list containing only the elements in the given list that tested true under the given function f
let rec filter[A] (f: A -> Bool) (input: PolyList[A]): PolyList[A] =
	case input of
		Nil -> Nil[A]
	|	Cons x xs -> if f x then Cons[A] x (filter[A] f xs)
					 else filter[A] f xs;

-- Reverse the given input list
let rec reverse[A] (input: PolyList[A]): PolyList[A] =
	case input of
		Nil 	  -> Nil[A]
	|	Cons x xs -> case last[A](input) of
						Nothing -> Nil[A]
					|	Just a  -> Cons[A] (a) (reverse[A]((take[A] (size[A](input) - 1) (input))));

-- Append another list to the first list
let rec append[A] (predecessor: PolyList[A]) (successor: PolyList[A]): PolyList[A] =
	case predecessor of
		Nil -> successor
	|	Cons x xs -> if size[A](xs) == 0 then (Cons[A] x successor)
					 else (Cons[A] x (append[A](xs)(successor)));

let (++)[A] (predecessor: PolyList[A]) (successor: PolyList[A]): PolyList[A] = append[A] predecessor successor;

-- Flatten the list
let rec concat[A] (l: PolyList[PolyList[A]]): PolyList[A] =
	case l of
		Nil 	  -> Nil[A]
	|	Cons x xs -> append[A] x (concat[A] xs);

-- Assert whether the given two lists are equal or not
let rec equals[A] (a: PolyList[A]) (b: PolyList[A]): Bool =
	case a of
		Nil -> (case b of
					Nil 	  -> True
				|	Cons x xs -> False)
	|	Cons x xs -> case b of
						Nil 	  -> False
					|	Cons y ys -> (x == y) && (equals[A] (xs) (ys));

-- Infix operator of equals
let (===)[A] (a: PolyList[A]) (b: PolyList[A]): Bool = (equals[A] a b);

-- Create a list with only one element
let createList[A] (x: A): PolyList[A] =
	Cons[A] x (Nil[A]);

let id[A] (x : A) = x;

let rec map[A, B] (f: A -> B) (l: PolyList[A]): PolyList[B] =
    case l of
        Nil       -> Nil[B]
     |  Cons x xs -> Cons[B] (f x) (map [A, B] f xs);

let rec foldl[A, B] (f: B -> A -> B) (x: B) (xs: PolyList[A]): B =
	case xs of
		Nil 	  -> x
	|	Cons a as -> foldl[A, B] f (f x a) as;

let rec foldr[A, B] (f: A -> B -> B) (x: B) (xs: PolyList[A]): B =
	case last[A] xs of
		Nothing -> x
	|	Just a  -> foldr[A, B] f (f a x) (take[A] ((size[A] xs) - 1) xs);

let flip[A, B, C] (f: A -> B -> C) (b: B) (a: A): C = f a b;

let uncurry[A, B, C] (f: A -> B -> C) (t: (A, B)): C = f t._1 t._2;

let ap1[A] (v: (A, A -> A -> A)): A -> A = v._2 v._1;

let ap2[A] (v: (A -> A -> A, A)): A -> A = \(value: A) -> (v._1 value v._2);

let const[A, B] (a: A) (b: B): A = a;

let const1[A, B] (a: A) (b: B): B = b;

let fst[A, B] (t: (A, B)): A = t._1;

let snd[A, B] (t: (A, B)): B = t._2;

-- Helpers
let max(x: Int) (y: Int): Int = if x >= y then x else y;

let min(x: Int) (y: Int): Int = if x <= y then x else y;

let printMaybe(m: Maybe[Char]): String =
	case m of
		Nothing -> "Nothing"
	|	Just a  -> a.toString();

let rec printPolyList(input: CharList): String =
	case input of 
		Nil 	  -> ""
	|	Cons x xs -> x.toString().concat(printPolyList(xs));

let rec printExpr(input: Expr): String =
	case input of
		Con x -> x.toString()
	|	Var cs -> printPolyList(cs)
	|	Fun cs es -> (printPolyList(cs)).concat(printExprList(es))
	|	Add e1 e2 -> (printExpr(e1)).concat(" + ").concat(printExpr(e2))
	|	Min e1 e2 -> (printExpr(e1)).concat(" - ").concat(printExpr(e2))
	|	Mul e1 e2 -> (printExpr(e1)).concat(" * ").concat(printExpr(e2))
	|	Div e1 e2 -> (printExpr(e1)).concat(" / ").concat(printExpr(e2))
and printExprList(input: PolyList[Expr]): String =
		case input of
			Nil -> ""
		|	Cons x xs -> (printExpr(x)).concat(printExprList(xs));

let rec printBindingPolyListResult(input: PolyList[Binding[Char, PolyList[Char]]]): String =
	case input of
		Nil 	  -> ""
	|	Cons x xs -> (printPolyList(x._2)).concat(printBindingPolyListResult(xs));

let rec printBindingIntResult (input: PolyList[Binding[Char, Int]]): String =
	case input of
		Nil 	  -> ""
	|	Cons x xs -> x._2.toString().concat("\n").concat(printBindingIntResult(xs));

let rec printBindingCharResult (input: PolyList[Binding[Char, Char]]): String =
	case input of
		Nil 	  -> ""
	|	Cons x xs -> x._2.toString().concat(printBindingCharResult(xs));

let rec printBindingTupleResult (input: PolyList[Binding[Char, (Char, Char)]]): String =
	case input of
		Nil 	  -> ""
	|	Cons x xs -> x._2._1.toString().concat(x._2._2.toString()).concat("\n").concat(printBindingTupleResult(xs));

let printBindingExprResult (input: PolyList[Binding[Char, Expr]]): String =
	case input of
		Nil 	  -> ""
	|	Cons x xs -> printExpr(x._2);

let rec readPolyList(s: String): CharList =
	if s.length() == 0 then Nil[Char]
	else (Cons[Char] s.charAt(0) (readPolyList(s.substring(1))));

-- Judgements
let isDigit (c: Char): Bool = c >= '0' && c <= '9';

let isUpper (c: Char): Bool = c >= 'A' && c <= 'Z';

let isLower (c: Char): Bool = c >= 'a' && c <= 'z';

let isAlpha (c: Char): Bool = (isUpper c) || (isLower c);

-- Elementary parsers
-- Simplest parser that parses any input starts from the given character k
let symbol (k: Char): Parser[Char, Char] =
	\(input: CharList) -> case input of
								Nil 	  -> Nil[Binding[Char, Char]]
							|	Cons x xs -> if x == k then (createList[Binding[Char, Char]] (xs, x))
					 						 else Nil[Binding[Char, Char]];

-- Simple parser that parses any input starts from the given list k
let token (k: CharList): Parser[Char, CharList] =
	\(input: CharList) -> case input of
									Nil 	  -> Nil[Binding[Char, CharList]]
								|	Cons x xs -> if (k ===[Char] (take[Char] (size[Char](k)) input)) then createList[Binding[Char, CharList]] (xs, k)
					 							 else Nil[Binding[Char, CharList]];

-- Parser that checks if given input satisfies the given condition
let satisfy[A] (p: A -> Bool): Parser[A, A] =
	\(input: PolyList[A]) -> case input of
									Nil 	  -> Nil[Binding[A, A]]
								|	Cons x xs -> if (p x) then (createList[Binding[A, A]] (xs, x))
					 							 else Nil[Binding[A, A]];

-- Parser that always succeeds
let succeed[S, R] (result: R): Parser[S, R] =
	\(input: PolyList[S]) -> createList[Binding[S, R]] (input, result);

-- Parser that always fails
let fail[S, R]: Parser[S, R] =
	\(input: PolyList[S]) -> Nil[Binding[S, R]];

-- Parser that always returns Unit result
let epsilon[S]: Parser[S, Unit] = succeed[S, Unit] ();

-- Parser Combinator
-- Bind the result of the first parser to the next
let bind[S, A, B] (p: Parser[S, A]) (f: A -> Parser[S, B]): Parser[S, B] =
    \(input: PolyList[S]) -> concat[Binding[S, B]] (map[Binding[S, A], PolyList[Binding[S, B]]] (\(v: Binding[S, A]) -> f v._2 v._1) (p input));

-- Sequence parser
let (~)[S, A, B] (p: Parser[S, A]) (q: Parser[S, B]): Parser[S, (A, B)] =
	bind[S, A, (A, B)] p (\(x: A) -> bind[S, B, (A, B)] q (\(y: B) -> succeed[S, (A, B)] (x, y)));

-- Concatenating parser
let (<|>)[S, A] (p1: Parser[S, A]) (p2: Parser[S, A]): Parser[S, A] =
	\(input: PolyList[S]) -> (p1 input) ++[Binding[S, A]] (p2 input);

-- Omits the preceeding blanks in the given input list
let sp[R] (p: Parser[Char, R]): Parser[Char, R] = \(input: CharList) -> p (dropBlanks(input));

-- Yields a parser that does the same thing as p but also guarantees that the rest string is empty
let just[S, R] (p: Parser[S, R]): Parser[S, R] =
	\(input: PolyList[S]) -> filter[Binding[S, R]] (\(v: Binding[S, R]) -> isEmpty[S] (v._1)) (p input);

-- Applies a given function to the result parse trees
let (<@)[S, A, B] (p: Parser[S, A]) (f: A -> B): Parser[S, B] =
	\(input: PolyList[S]) -> map[Binding[S, A], Binding[S, B]] (\(v: Binding[S, A]) -> (v._1, (f v._2))) (p input);

-- Sequence parser that abandans the second part of the parse result
let (<~)[S, A, B] (p: Parser[S, A]) (q: Parser[S, B]): Parser[S, A] =
	p ~[S, A, B] q <@[S, (A, B), A] (\(v: (A, B)) -> v._1);

-- Sequence parser that abandans the first part of the parse result
let (~>)[S, A, B] (p: Parser[S, A]) (q: Parser[S, B]): Parser[S, B] =
	p ~[S, A, B] q <@[S, (A, B), B] (\(v: (A, B)) -> v._2);

-- Sequence parser that concatenates a parsing result to a list of parsing results
let (<~>)[S, A] (p: Parser[S, A]) (q: Parser[S, PolyList[A]]): Parser[S, PolyList[A]] =
	p ~[S, A, PolyList[A]] q <@[S, (A, PolyList[A]), PolyList[A]] (\(v: (A, PolyList[A])) -> (Cons[A] v._1 v._2));

-- A deterministic parser that assumes there is at least one parsing result and returns the first result.
-- If the result list is empty, throws an error
let some[S, R] (p: Parser[S, R]): DetPars[S, R] =
	\(input: PolyList[S]) -> case first[Binding[S, R]] (just[S, R] p input) of
								Nothing -> error[R] "Parsing Error!!"
							|	Just b  -> (snd[PolyList[S], R] b);

-- A parser that parses positive digits
let digit: Parser[Char, Int] =
	satisfy[Char] isDigit <@[Char, Char, Int] (\(c: Char) -> java.lang.Character.digit(c, 10));

-- A parser that parses parentheses
let rec parens: Parser[Char, ParseTree] =
	((symbol '(') ~[Char, Char, ParseTree] (parens) ~[Char, (Char, ParseTree), Char] (symbol ')') ~[Char, ((Char, ParseTree), Char), ParseTree] parens) 
	<@[Char, (((Char, ParseTree), Char), ParseTree), ParseTree] (\(t: (((Char, ParseTree), Char), ParseTree)) -> Bin (t._1._1._2, t._2))
	<|>[Char, ParseTree] (succeed[Char, ParseTree] Nul);

let open: Parser[Char, Char] = symbol '(';

let close: Parser[Char, Char] = symbol ')';

-- Another pareser that parses parentheses but using partial sequence parsers
let rec parenses: Parser[Char, ParseTree] =
	\(input: CharList) ->
		((open ~>[Char, Char, ParseTree] parenses <~[Char, ParseTree, Char] close ~[Char, ParseTree, ParseTree] parenses)
		<@[Char, (ParseTree, ParseTree), ParseTree] (\(t: (ParseTree, ParseTree)) -> Bin (t._1, t._2))
		<|>[Char, ParseTree] (succeed[Char, ParseTree] Nul)) input;

-- Parsing the nesting number of the given parentheses
let rec nesting: Parser[Char, Int] =
	\(input: CharList) ->
		((open ~>[Char, Char, Int] nesting <~[Char, Int, Char] close ~[Char, Int, Int] nesting)
		<@[Char, (Int, Int), Int] (\(t: (Int, Int)) -> (1 + t._1) `max` t._2)
		<|>[Char, Int] (succeed[Char, Int] 0)) input;

-- Parsing the nested parenthesis
let rec foldparens[A] (f: (A, A) -> A) (a: A): Parser[Char, A] =
	open ~>[Char, Char, A] (foldparens[A] f a) <~[Char, A, Char] close ~[Char, A, A] (foldparens[A] f a) <@[Char, (A, A), A] f
	<|>[Char, A] (succeed[Char, A] a);

-- A repetition parser
let rec many[S, R] (p: Parser[S, R]): Parser[S, PolyList[R]] =
	\(input: PolyList[S]) ->
		((p ~[S, R, PolyList[R]] (many[S, R] p)) 
		<@[S, (R, PolyList[R]), PolyList[R]] (\(v: (R, PolyList[R])) -> Cons[R] v._1 v._2)
		<|>[S, PolyList[R]] (succeed[S, PolyList[R]] (Nil[R]))) input;

-- A repetition parser that does not accept empty input
let many1[S, R] (p: Parser[S, R]): Parser[S, PolyList[R]] =
	\(input: PolyList[S]) ->
		(p ~[S, R, PolyList[R]] (many[S, R] p)
		<@[S, (R, PolyList[R]), PolyList[R]] (\(v: (R, PolyList[R])) -> Cons[R] v._1 v._2)) input;

-- A parser that parses natual numbers
let natrual: Parser[Char, Int] =
	many[Char, Int] digit <@[Char, PolyList[Int], Int] (\(v: PolyList[Int]) -> foldl[Int, Int] (\(a: Int) -> \(b: Int) -> a * 10 + b) 0 v);

-- An option parser that generates a list with only one element or an empty list
let option[S, R] (p: Parser[S, R]): Parser[S, PolyList[R]] =
	p <@[S, R, PolyList[R]] (\(v: R) -> createList[R] v)
	<|>[S, PolyList[R]] (succeed[S, PolyList[R]] (Nil[R]));

-- A parser that omits the first and the last parse reuslts
let pack[S, A, B, C] (p1: Parser[S, A]) (p2: Parser[S, B]) (p3: Parser[S, C]): Parser[S, B] =
	p1 ~>[S, A, B] p2 <~[S, B, C] p3;

-- A parser that parses parenthesis
let parenthesized[A] (p: Parser[Char, A]): Parser[Char, A] =
	pack[Char, Char, A, Char] (symbol '(') p (symbol ')');

-- A parser that parses square brackets
let bracketed[A] (p: Parser[Char, A]): Parser[Char, A] =
	pack[Char, Char, A, Char] (symbol '[') p (symbol ']');

let compound[A] (p: Parser[Char, A]): Parser[Char, A] =
	pack[Char, CharList, A, CharList] (token (readPolyList("begin"))) p (token (readPolyList("end")));

-- A parser that generates a parser for a possibly empty list with a given parser for separators
let listOf[S, A, B] (p: Parser[S, A]) (q: Parser[S, B]): Parser[S, PolyList[A]] =
	p <~>[S, A] (many[S, A] (q ~>[S, B, A] p)) <|>[S, PolyList[A]] (succeed[S, PolyList[A]] (Nil[A]));

-- A parser that parses strings seperated by commas
let commaList[A] (p: Parser[Char, A]): Parser[Char, PolyList[A]] = listOf[Char, A, Char] p (symbol ',');

-- A parser that parses string seperated by semicolons
let semicList[A] (p: Parser[Char, A]): Parser[Char, PolyList[A]] = listOf[Char, A, Char] p (symbol ';');

-- A parser that transforms a list of parsers for some type into a parser yielding a list of elements of that type
let sequence[S, A] (ps: PolyList[Parser[S, A]]): Parser[S, PolyList[A]] = foldr[Parser[S, A], Parser[S, PolyList[A]]] ((<~>)[S, A]) (succeed[S, PolyList[A]] (Nil[A])) ps;

-- A parser that iterates operator <|>
let choice[S, A] (ps: PolyList[Parser[S, A]]): Parser[S, A] = foldr[Parser[S, A], Parser[S, A]] ((<|>)[S, A]) (fail[S, A]) ps;

-- A parser expects a given parser for seperators yielding a function and uses it to combine parse trees from left to right
let chainl[S, A] (p: Parser[S, A]) (q: Parser[S, (A -> A -> A)]): Parser[S, A] =
	p ~[S, A, PolyList[((A -> A -> A), A)]] (many[S, ((A -> A -> A), A)] (q ~[S, (A -> A -> A), A] p))
	<@[S, (A, PolyList[((A -> A -> A), A)]), A] uncurry[A, PolyList[((A -> A -> A), A)], A] (foldl[((A -> A -> A), A), A] (flip[((A -> A -> A), A), A, A] (ap2[A])));

-- A parser expects a given parser for seperators yielding a function and uses it to combine parse trees from right to left
let chainr[S, A] (p: Parser[S, A]) (q: Parser[S, (A -> A -> A)]): Parser[S, A] =
	many[S, (A, (A -> A -> A))] (p ~[S, A, (A -> A -> A)] q) ~[S, PolyList[(A, (A -> A -> A))], A] p
	<@[S, (PolyList[(A, (A -> A -> A))], A), A] uncurry[PolyList[(A, A -> A -> A)], A, A] (flip[A, PolyList[(A, A -> A -> A)], A] (foldr[(A, A -> A -> A), A] (ap1[A])));

-- A special case parser for <@ that transforms the original result to a specific value in the give tuple
let (<?@)[S, A, R] (p: Parser[S, PolyList[A]]) (t: (R, A -> R)): Parser[S, R] =
	p <@[S, PolyList[A], R] (\(v: PolyList[A]) -> case v of
														Nil 	  -> t._1
												|		Cons x xs -> t._2 x);

-- A parser that parses integers (both positive and negative)
let integer: Parser[Char, Int] =
	(option[Char, Char] (symbol '-') ~[Char, PolyList[Char], Int] natrual)
	<@[Char, (PolyList[Char], Int), Int] (\(v: (PolyList[Char], Int)) -> case v._1 of
																	Nil 	  -> v._2
																  |	Cons x xs -> (-v._2));

 {-
-- A parser that parses floating numbers
let fract: Parser[Char, Float] =
	many[Char, Int] digit <@[Char, PolyList[Int], Float] \(v: PolyList[Int] -> foldr[Int, Float] (\(a: Int) -> \(b: Int) -> (b + a) / 10.0) 0 v);
-}

-- A parser that parses a series of alphabetic letters
let identifier: Parser[Char, CharList] = many1[Char, Char] (satisfy[Char] isAlpha);


-- A parser that picks out the first parsing result
let firstResult[S, A] (p: Parser[S, A]): Parser[S, A] =
	\(input: PolyList[S]) -> case p input of
								Nil 	  -> Nil[Binding[S, A]]
							|	Cons x xs -> createList[Binding[S, A]] x;

-- Take all or nothing version of many parser
let greedy[S, A] (p: Parser[S, A]): Parser[S, PolyList[A]] = firstResult[S, PolyList[A]] (many[S, A] p);

-- Take all or nothing version of many1 parser
let greedy1[S, A] (p: Parser[S, A]): Parser[S, PolyList[A]] = firstResult[S, PolyList[A]] (many1[S, A] p);

-- A parser that must accept a construction if it is present, but which does not fail if it is not present
let compulsion[S, A] (p: Parser[S, A]): Parser[S, PolyList[A]] = firstResult[S, PolyList[A]] (option[S, A] p);

-- Arithmetic Parser
let rec fact: Parser[Char, Expr] =
	(integer <@[Char, Int, Expr] (\(v: Int) -> Con v))
	<|>[Char, Expr] ((identifier 
		~[Char, CharList, (CharList -> Expr)]
			((option[Char, PolyList[Expr]] (parenthesized[PolyList[Expr]] (commaList[Expr] expr)))
				<?@[Char, PolyList[Expr], (CharList -> Expr)] (\(cs: CharList) -> Var cs, (flip[CharList, PolyList[Expr], Expr] (\(cs: CharList) -> \(pl: PolyList[Expr]) -> Fun cs pl)))))
			<@[Char, (CharList, (CharList -> Expr)), Expr] (\(v: (CharList, (CharList -> Expr))) -> v._2 v._1))
	<|>[Char, Expr] (parenthesized[Expr] expr)
and term: Parser[Char, Expr] = chainr[Char, Expr] fact (symbol '*' <@[Char, Char, (Expr -> Expr -> Expr)] (\(c: Char) -> \(a: Expr) -> \(b: Expr) -> Mul a b)
							<|>[Char, (Expr -> Expr -> Expr)] (symbol '/' <@[Char, Char, (Expr -> Expr -> Expr)] (\(c: Char) -> \(a: Expr) -> \(b: Expr) -> Div a b)))
and expr: Parser[Char, Expr] = chainr[Char, Expr] term (symbol '+' <@[Char, Char, (Expr -> Expr -> Expr)] (\(c: Char) -> \(a: Expr) -> \(b: Expr) -> Add a b)
							<|>[Char, (Expr -> Expr -> Expr)] (symbol '-' <@[Char, Char, (Expr -> Expr -> Expr)] (\(c: Char) -> \(a: Expr) -> \(b: Expr) -> Min a b)));

-- Advanced Arithmetic Expression Parser Combinators
type Op[A] = (Char, A -> A -> A);

let gen[A] (ops: PolyList[Op[A]]) (p: Parser[Char, A]): Parser[Char, A] =
	chainr[Char, A] p (choice[Char, (A -> A -> A)] 
		(map[Op[A], Parser[Char, (A -> A -> A)]] 
			(\(op: Op[A]) -> 
				(symbol op._1 <@[Char, Char, (A -> A -> A)] (\(c: Char) -> op._2))) ops));

let multis: PolyList[Op[Expr]] = Cons[Op[Expr]] ('*', \(a: Expr) -> \(b: Expr) -> Mul a b) (Cons[Op[Expr]] ('/', \(a: Expr) -> \(b: Expr) -> Div a b) (Nil[Op[Expr]]));

let addis: PolyList[Op[Expr]] = Cons[Op[Expr]] ('+', \(a: Expr) -> \(b: Expr) -> Add a b) (Cons[Op[Expr]] ('-', \(a: Expr) -> \(b: Expr) -> Min a b) (Nil[Op[Expr]]));

let expr1: Parser[Char, Expr] = foldr[PolyList[Op[Expr]], Parser[Char, Expr]] (gen[Expr]) fact (Cons[PolyList[Op[Expr]]] addis (Cons[PolyList[Op[Expr]]] multis (Nil[PolyList[Op[Expr]]])));

-- BNF Grammar Parser Combinators
type Env[A, B] = PolyList[(A, B)];

data Symbol = Term CharList
			| Nont CharList;

let (<==>) (s1: Symbol) (s2: Symbol): Bool =
	case s1 of
		Term t1 ->
			(case s2 of
				Term t2 -> if t1 ===[Char] t2 then True else False
			|	Nont n2 -> False)
	|	Nont n1 ->
			case s2 of
				Term t2 -> False
			|	Nont n2 -> if n1 ===[Char] n2 then True else False;

let rec assoc[D] (env: Env[Symbol, D]) (s: Symbol): D =
	case env of
		Nil       -> error[D] "error"
	|	Cons e es -> if (e._1 <==> s) then e._2 else (assoc[D] es s);

let rec mapenv[S, A, B] (f: A -> B) (env: Env[S, A]): Env[S, B] =
	case env of
		Nil       -> Nil[(S, B)]
	|	Cons e es -> Cons[(S, B)] (e._1, f e._2) (mapenv[S, A, B] f es);

type Alt = PolyList[Symbol];

type Rhs = PolyList[Alt];

type Gram = Env[Symbol, Rhs];

let bnfTerm (termp: Parser[Char, CharList]): Parser[Char, Symbol] =
	sp[CharList] termp <@[Char, CharList, Symbol] (\(cs: CharList) -> Term cs);

let bnfNont (nontp: Parser[Char, CharList]): Parser[Char, Symbol] =
	sp[CharList] nontp <@[Char, CharList, Symbol] (\(cs: CharList) -> Nont cs);

let alt (termp: Parser[Char, CharList]) (nontp: Parser[Char, CharList]): Parser[Char, Alt] =
	many[Char, Symbol] (bnfTerm termp <|>[Char, Symbol] (bnfNont nontp));

let rhs (termp: Parser[Char, CharList]) (nontp: Parser[Char, CharList]): Parser[Char, Rhs] =
	listOf[Char, Alt, Char] (alt termp nontp) (sp[Char] (symbol '|'));

let rule (termp: Parser[Char, CharList]) (nontp: Parser[Char, CharList]): Parser[Char, (Symbol, Rhs)] =
	(bnfNont nontp) ~[Char, Symbol, Rhs]
		(sp[CharList] (token (readPolyList "::=")) ~>[Char, CharList, Rhs] (rhs termp nontp) <~[Char, Rhs, Char] (sp[Char] (symbol '.')));

-- BNF parser that parses any DSL descripted in BNF
let bnf (nontp: Parser[Char, CharList]) (termp: Parser[Char, CharList]): Parser[Char, Gram] =
	many[Char, (Symbol, Rhs)] (rule termp nontp);

let blockgram: PolyList[Binding[Char, Gram]] =
	bnf (greedy1[Char, Char] (satisfy[Char] isUpper)) (greedy1[Char, Char] (satisfy[Char] isLower))
		(readPolyList "BLOCK ::= begin BLOCK end BLOCK | .");

data GramTree = Node Symbol (PolyList[GramTree]);

let symbol2 (s: Symbol): Parser[Symbol, Symbol] =
	\(input: Alt) -> case input of
								Nil 	  -> Nil[Binding[Symbol, Symbol]]
							|	Cons x xs -> if x <==> s then (createList[Binding[Symbol, Symbol]] (xs, x))
					 						 else Nil[Binding[Symbol, Symbol]];

let (..)[A, B, C] (f1: B -> C) (f2: A -> B): A -> C = \(a: A) -> f1 (f2 a);

let rec parsSym (gram: Gram) (s: Symbol): Parser[Symbol, GramTree] =
	case s of
		Term t -> symbol2 s <@[Symbol, Symbol, PolyList[GramTree]] (\(sym: Symbol) -> Nil[GramTree]) <@[Symbol, PolyList[GramTree], GramTree] (\(gs: PolyList[GramTree]) -> Node s gs)
	|	Nont n -> parsRhs gram (assoc[Rhs] gram s) <@[Symbol, PolyList[GramTree], GramTree] (\(gs: PolyList[GramTree]) -> Node s gs)
and parsAlt (gram: Gram) (a: Alt): Parser[Symbol, PolyList[GramTree]] =
	(sequence[Symbol, GramTree] ..[Alt, PolyList[Parser[Symbol, GramTree]], Parser[Symbol, PolyList[GramTree]]] (map[Symbol, Parser[Symbol, GramTree]] (parsSym gram))) a
and parsRhs (gram: Gram) (r: Rhs): Parser[Symbol, PolyList[GramTree]] =
	(choice[Symbol, PolyList[GramTree]] ..[Rhs, PolyList[Parser[Symbol, PolyList[GramTree]]], Parser[Symbol, PolyList[GramTree]]] (map[Alt, Parser[Symbol, PolyList[GramTree]]] (parsAlt gram))) r;

let parsGram (gram: Gram) (start: Symbol): Parser[Symbol, GramTree] = parsSym gram start;

type SymbolSet = Parser[Char, CharList];

-- Context-free Grammar
type CFG = (SymbolSet, SymbolSet, CharList, Symbol);

-- A parser that converts a type of parser source to tokens then trees
let twopass[A, B, C] (lex: Parser[A, B]) (synt: Parser[B, C]): Parser[A, C] =
	\(input: PolyList[A]) ->
		concat[(PolyList[A], C)] (map[(PolyList[A], PolyList[B]), PolyList[(PolyList[A], C)]] (\(t: (PolyList[A], PolyList[B])) ->
			map[(PolyList[B], C), (PolyList[A], C)] (\(s: (PolyList[B], C)) -> (t._1, s._2)) (just[B, C] synt t._2))
				(many[A, B] lex input));

-- Parser Generator
{-
let parsgen (cfg: CFG): Parser[Symbol, GramTree] =
	\(input: Alt) ->
		bnf cfg._1 cfg._2 <@[Char, Gram, GramTree] (\(g: Gram) -> (some[Symbol, GramTree] ((parsGram g cfg._4) input) cfg._3));
-}
-- TESTING CASES
-- Test of Concatenating parser and partial sequencing parsers ~> and <~
--printBindingCharResult (((symbol '(') ~>[Char, Char, Char] (symbol 'a') <~[Char, Char, Char] (symbol ')') <|>[Char, Char] (succeed[Char, Char] '.')) (readPolyList("(a)")))

-- Test of parenses parsers that parse parenthesis
--printBindingIntResult (nesting (readPolyList("()(())()")))
--parenses (readPolyList("()(())()"))

-- Test of natural parser that parses a series of natural numbers
--printBindingIntResult (natrual (readPolyList("12345678.1")))

-- Test of Arithmetic Expression parsers
printBindingExprResult(expr (readPolyList("11+2*8/40")))
--(Nont (readPolyList "hello")) <==> (Nont (readPolyList "hell"))
